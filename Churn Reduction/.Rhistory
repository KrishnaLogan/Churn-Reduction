rm(list = ls())
setwd("C:/Users/chinna/Desktop/Data Science/Project")
## Read the data
df_train = read.csv("Train_data.csv", header = T)
df_test = read.csv("Test_data.csv", header = T)
rm(list = ls())
setwd("C:/Users/chinna/Desktop/Data Science/Project/Churn Reduction")
## Read the data
df_train = read.csv("Train_data.csv", header = T)
df_test = read.csv("Test_data.csv", header = T)
str(df_train)
#Load Libraries
x = c("ggplot2", "corrgram", "DMwR", "caret", "randomForest", "unbalanced", "C50", "dummies", "e1071", "Information",
"MASS", "rpart", "gbm", "ROSE", 'sampling', 'DataCombine', 'inTrees')
lapply(x, require, character.only = TRUE)
rm(x)
#Missing value analysis
missing_train = data.frame(apply(df_train,2,function(x){sum(is.na(x))}))
missing_test = data.frame(apply(df_test,2,function(x){sum(is.na(x))}))
##Data Manupulation; convert string categories into factor numeric
#assigning levels to categorical variables
fnames = c("state","international.plan","voice.mail.plan","Churn")
for(i in fnames){
if(class(df_train[,i])== 'factor'){
df_train[,i] = factor(df_train[,i], labels = (1:length(levels(factor(df_train[,i])))))
}
}
for(i in fnames){
if(class(df_test[,i])== 'factor'){
df_test[,i] = factor(df_test[,i], labels = (1:length(levels(factor(df_test[,i])))))
}
}
rm(fnames)
rm(i)
numeric_index = sapply(df_train,is.numeric) #selecting only numeric
numeric_data = df_train[,numeric_index]
cnames = colnames(numeric_data)
## Correlation Plot
corrgram(df_train[,numeric_index], order = F,
upper.panel=panel.pie, text.panel=panel.txt, main = "Correlation Plot")
## Chi-squared Test of Independence
factor_index = sapply(df_train,is.factor)
factor_data = df_train[,factor_index]
for (i in 1:4)
{
print(names(factor_data)[i])
print(chisq.test(table(factor_data$Churn,factor_data[,i])))
}
## Dimension Reduction
df_train = subset(df_train, select = -c(total.day.minutes, total.eve.minutes, total.night.minutes, total.intl.minutes, phone.number))
df_test = subset(df_test, select = -c(total.day.minutes, total.eve.minutes, total.night.minutes, total.intl.minutes, phone.number))
#normality check
hist(df_train$number.customer.service.calls)
#Normalisation
cnames = c("account.length","area.code","number.vmail.messages","total.day.calls","total.day.charge",
"total.eve.calls","total.eve.charge","total.night.calls","total.night.charge","total.intl.calls", "total.intl.charge",
"number.customer.service.calls")
for(i in cnames){
print(i)
df_train[,i] = (df_train[,i] - min(df_train[,i]))/
(max(df_train[,i] - min(df_train[,i])))
}
for(i in cnames){
print(i)
df_test[,i] = (df_test[,i] - min(df_test[,i]))/
(max(df_test[,i] - min(df_test[,i])))
}
rmExcept(c("df_train","df_test"))
train = df_train
test = df_test
##Decision tree for classification
#Develop Model on training data
C50_model = C5.0(Churn ~., train, trials = 50, rules = TRUE)
#Summary of DT model
summary(C50_model)
View(df_train)
factor_index = sapply(df_train,is.factor)
factor_data = df_train[,factor_index]
for (i in 1:4)
{
print(names(factor_data)[i])
print(chisq.test(table(factor_data$Churn,factor_data[,i])))
}
View(factor_data)
#Logistic Regression
logit_model = glm(Churn ~ ., data = train, family = "binomial")
